// public/js/storefront.js
const $ = (s) => document.querySelector(s);
const grid = $("#grid");
const resultsMeta = $("#results-meta");
const loadMoreBtn = $("#loadMore");
const PLACEHOLDER = "/images/placeholder.png";

// Pagination state
let page = 1;
let loading = false;
let done = false; // no more pages from server

/* ---------- Formatters ---------- */
function euro(cents = 0) {
  return new Intl.NumberFormat("fi-FI", { style: "currency", currency: "EUR" })
    .format((cents || 0) / 100);
}
function normalizeEuroInput(v) {
  return String(v ?? "").replace(",", ".").trim();
}
function hasSale(p) {
  return Number.isFinite(p.oldPrice) && Number.isFinite(p.price) && p.oldPrice > p.price;
}
function salePercent(p) {
  return hasSale(p) ? Math.round(100 - (p.price / p.oldPrice) * 100) : 0;
}

/* ---------- Badge helpers (ribbons) ---------- */
function isNew(createdAt) {
  if (!createdAt) return false;
  const d = new Date(createdAt);
  return !isNaN(d) && (Date.now() - d.getTime()) / 86400000 <= 14;
}
function computeBadge(p) {
  // SALE takes priority if oldPrice > price
  if (hasSale(p)) {
    return `SALE -${salePercent(p)}%`;
  }
  if (typeof p.stock === "number") {
    if (p.stock === 0) return "OUT";
    if (p.stock <= 3) return "LOW STOCK";
  }
  if (isNew(p.createdAt)) return "NEW";
  return "";
}

// expose for quickview.js
window.PLACEHOLDER = PLACEHOLDER;
window.euro = euro;
window.computeBadge = computeBadge;

/* ---------- Price hint placeholders (Min/Max) ---------- */
function updatePriceHints(items) {
  const minEl = $("#min"), maxEl = $("#max");
  if (!minEl || !maxEl) return;

  if (!Array.isArray(items) || items.length === 0) {
    minEl.placeholder = "Min €";
    maxEl.placeholder = "Max €";
    return;
  }
  const prices = items.map(p => Number(p.price)).filter(Number.isFinite);
  if (!prices.length) return;

  const minC = Math.min(...prices);
  const maxC = Math.max(...prices);
  minEl.placeholder = `Min ${euro(minC)}`;
  maxEl.placeholder = `Max ${euro(maxC)}`;
  minEl.min = 0; maxEl.min = 0;
}

/* ---------- Active filter chips ---------- */
function getCurrentFilters() {
  return {
    q: $("#q").value.trim(),
    category: $("#category").value,
    min: $("#min").value,
    max: $("#max").value,
    sort: $("#sort").value || "new",
  };
}
function renderActiveFilters() {
  const wrap = $("#active-filters");
  if (!wrap) return;
  const f = getCurrentFilters();
  const chips = [];
  if (f.q)        chips.push({ key: "q",        label: `Search: “${f.q}”` });
  if (f.category) chips.push({ key: "category", label: `Category: ${f.category}` });
  if (f.min)      chips.push({ key: "min",      label: `Min €${f.min}` });
  if (f.max)      chips.push({ key: "max",      label: `Max €${f.max}` });

  wrap.innerHTML = chips.map(c => `
    <span class="filter-chip" data-key="${c.key}">
      ${c.label}
      <button class="x" aria-label="Remove ${c.label}">&times;</button>
    </span>
  `).join("");

  wrap.querySelectorAll(".filter-chip .x").forEach(btn => {
    btn.addEventListener("click", () => {
      const key = btn.closest(".filter-chip").dataset.key;
      const el = document.getElementById(key);
      if (el) el.value = "";
      resetAndLoad(); // removing a chip resets pagination
    });
  });
}
function clearAllFilters() {
  ["q","category","min","max"].forEach(id => { const el = document.getElementById(id); if (el) el.value = ""; });
  const sort = $("#sort"); if (sort) sort.value = "new";
  history.replaceState(null, "", location.pathname);
  resetAndLoad();
}

/* ---------- Card view ---------- */
function priceBlockHTML(p) {
  if (!hasSale(p)) {
    return `<p class="price">${euro(p.price)}</p>`;
  }
  const percent = salePercent(p);
  return `
    <p class="price">
      <span style="text-decoration:line-through; opacity:0.6; margin-right:6px;">${euro(p.oldPrice)}</span>
      <strong style="color:#e6004c">${euro(p.price)}</strong>
      <span style="background:#e6004c;color:#fff;border-radius:999px;padding:2px 8px;font-size:11px;font-weight:700;margin-left:6px;">
        SALE −${percent}%
      </span>
    </p>
  `;
}

function productCard(p) {
  const imgSrc = (p.imageUrl && p.imageUrl.trim()) ? p.imageUrl : PLACEHOLDER;
  const badge = computeBadge(p);
  const badgeAttr = badge ? ` data-badge="${badge}"` : "";
  const slug = encodeURIComponent(p.slug);

  return `
    <article class="card"${badgeAttr}>
      <img src="${imgSrc}" alt="${p.name}" loading="lazy"
           onerror="this.onerror=null;this.src='${PLACEHOLDER}'">
      <h4>${p.name}</h4>
      ${priceBlockHTML(p)}
      <div class="actions">
        <a class="btn" href="/product.html?slug=${slug}">View</a>
        <button class="btn" data-quick data-slug="${slug}">Quick view</button>
      </div>
    </article>
  `;
}

/* ---------- Hydrate filters from URL on first load ---------- */
(() => {
  const u = new URL(location.href);
  $("#q").value        = u.searchParams.get("q")        || "";
  $("#category").value = u.searchParams.get("category") || "";
  $("#min").value      = u.searchParams.get("min")      || "";
  $("#max").value      = u.searchParams.get("max")      || "";
  $("#sort").value     = u.searchParams.get("sort")     || "new";
})();

/* ---------- Core loader (supports append) ---------- */
async function load({ append = false } = {}) {
  if (loading || (append && done)) return;
  loading = true;

  const qVal   = $("#q").value || "";
  const catVal = $("#category").value || "";
  const minVal = normalizeEuroInput($("#min").value || "");
  const maxVal = normalizeEuroInput($("#max").value || "");
  const sortVal= $("#sort").value || "new";

  const params = new URLSearchParams({
    q: qVal,
    category: catVal,
    min: minVal,
    max: maxVal,
    sort: sortVal,
    page: append ? (page + 1) : 1
  });

  // keep URL in sync (but don’t include page)
  history.replaceState(null, "", "?" + new URLSearchParams({
    q: params.get("q"), category: params.get("category"),
    min: params.get("min"), max: params.get("max"),
    sort: params.get("sort")
  }).toString());

  toggleLoadMore(append ? "Loading…" : null);
  if (!append) {
    grid.innerHTML = `<div class="card skeleton" style="height:240px"></div>`;
    if (resultsMeta) resultsMeta.textContent = "Loading products…";
  }

  try {
    const res = await fetch("/api/products?" + params.toString());
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const data = await res.json();
    const items = data.items || [];

    if (!append) {
      page = 1;
      done = items.length === 0;

      if (!items.length) {
        updatePriceHints([]);
        renderActiveFilters();
        if (resultsMeta) resultsMeta.textContent = "0 products";
        grid.innerHTML = `
          <div class="card" style="text-align:center">
            <h4>No products found</h4>
            <p class="price">Try adjusting your filters.</p>
          </div>`;
        toggleLoadMore();
        return;
      }

      const prices = items.map(p => p.price).filter(Number.isFinite);
      const minC = Math.min(...prices), maxC = Math.max(...prices);
      if (resultsMeta) {
        resultsMeta.textContent =
          `${items.length} product${items.length > 1 ? "s" : ""} • ${euro(minC)}–${euro(maxC)}`;
      }

      updatePriceHints(items);
      renderActiveFilters();
      grid.innerHTML = items.map(productCard).join("");
      toggleLoadMore(done ? "No more items" : null);
      return;
    }

    // Append
    if (!items.length) {
      done = true;
      toggleLoadMore("No more items");
      return;
    }
    page += 1;
    grid.insertAdjacentHTML("beforeend", items.map(productCard).join(""));
    toggleLoadMore();

  } catch (err) {
    console.error("Failed to load products:", err);
    if (!append) {
      if (resultsMeta) resultsMeta.textContent = "Error loading products";
      grid.innerHTML = `
        <div class="card" style="text-align:center">
          <h4>Error</h4>
          <p class="price">Please try again.</p>
        </div>`;
    }
    toggleLoadMore();
  } finally {
    loading = false;
  }
}

/* ---------- Load more toggle ---------- */
function toggleLoadMore(label) {
  if (!loadMoreBtn) return;
  if (done) { loadMoreBtn.style.display = "none"; return; }
  loadMoreBtn.style.display = "inline-block";
  loadMoreBtn.disabled = !!label && label.includes("Loading");
  loadMoreBtn.textContent = label || "Load more";
}

/* ---------- Reset then load ---------- */
function resetAndLoad() {
  page = 1; done = false;
  load({ append: false });
}

/* ---------- Live filters (debounced) ---------- */
const filterEls = ["q","category","min","max","sort"].map(id => document.getElementById(id));
const debouncedLoad = (() => { let t; return () => { clearTimeout(t); t = setTimeout(resetAndLoad, 250); }; })();
filterEls.forEach(el => {
  const ev = el.tagName === "SELECT" ? "change" : "input";
  el.addEventListener(ev, debouncedLoad);
});

// Hide old Apply (we do live filtering now)
const applyBtn = document.getElementById("apply");
if (applyBtn) applyBtn.style.display = "none";

// Clear all button
const clearBtn = document.getElementById("clearFilters");
if (clearBtn) clearBtn.addEventListener("click", clearAllFilters);

// Load more click
if (loadMoreBtn) loadMoreBtn.addEventListener("click", () => load({ append: true }));

/* ---------- Initial load ---------- */
resetAndLoad();
