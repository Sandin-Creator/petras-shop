
(async () => {
  try {
    const r = await fetch("/api/auth/me");
    const { user } = await r.json();
    if (!user) location.href = "/login.html?next=/admin";
  } catch (_) {
    location.href = "/login.html?next=/admin";
  }
})();

// public/js/admin.js

const list = document.getElementById("adminList");
const logoutBtn = document.getElementById("logout");
const createForm = document.getElementById("createForm");

// Create form elements
const newName = document.getElementById("newName");
const newSlug = document.getElementById("newSlug");
const newPrice = document.getElementById("newPrice");       // Regular price (€)
const newOldPrice = document.getElementById("newOldPrice"); // Sale price (€) - discounted
const newCategory = document.getElementById("newCategory");
const newStock = document.getElementById("newStock");

const imageFile = document.getElementById("imageFile");
const uploadBtn = document.getElementById("uploadBtn");
const imageUrlInput = document.getElementById("imageUrl");
const preview = document.getElementById("preview");

const adminSearch = document.getElementById("adminSearch");
const adminSort = document.getElementById("adminSort");

const CATEGORIES = ["", "clothes", "shoes", "accessories", "electronics", "perfume", "cosmetics"];
const PLACEHOLDER = "/images/placeholder.png";

/* ---------------- Helpers ---------------- */

const euro = (c) =>
  new Intl.NumberFormat("fi-FI", { style: "currency", currency: "EUR" }).format(
    Number(c || 0) / 100
  );

// Accept "4,99" and "4.99"
function toCents(val) {
  const n = Number(String(val ?? "").replace(",", ".").trim());
  return Number.isFinite(n) ? Math.round(n * 100) : 0;
}

const slugify = (s) =>
  String(s || "")
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/(^-|-$)+/g, "");

// Badges (same logic as storefront/product)
function isNew(createdAt) {
  if (!createdAt) return false;
  const d = new Date(createdAt);
  return !isNaN(d) && (Date.now() - d.getTime()) / 86400000 <= 14;
}
function computeBadge(p) {
  if (typeof p.stock === "number") {
    if (p.stock === 0) return "OUT";
    if (p.stock <= 3) return "LOW STOCK";
  }
  if (isNew(p.createdAt)) return "NEW";
  return "";
}
function badgeHTML(label) {
  if (!label) return "";
  const bg =
    label === "OUT" ? "background:#553845;color:#fff;"
    : label === "LOW STOCK" ? "background:#ffd1e1;color:#553845;border:1px solid rgba(255,143,179,.45);"
    : "background:#ff4f87;color:#fff;";
  return `<span style="display:inline-block;margin-left:8px;padding:2px 8px;border-radius:999px;font-size:11px;font-weight:700;${bg}">${label}</span>`;
}

/* ---------------- Auth ---------------- */

logoutBtn.onclick = async () => {
  await fetch("/api/auth/logout", { method: "POST" });
  location.href = "/";
};

/* ---------------- Slug auto-fill ---------------- */

let slugDirty = false;
newName?.addEventListener("input", () => {
  if (!slugDirty) newSlug.value = slugify(newName.value);
});
newSlug?.addEventListener("input", () => {
  slugDirty = true;
});

/* ---------------- Preview / Upload ---------------- */

function renderPreview(url) {
  const imgSrc = url && url.trim() ? url : PLACEHOLDER;
  preview.innerHTML = `<img src="${imgSrc}" style="max-width:100%;max-height:140px;border-radius:8px;object-fit:cover"
    onerror="this.onerror=null;this.src='${PLACEHOLDER}'">`;
}
renderPreview(imageUrlInput?.value || "");

imageUrlInput?.addEventListener("input", () => {
  renderPreview(imageUrlInput.value);
});

if (uploadBtn) {
  uploadBtn.onclick = async () => {
    if (!imageFile.files[0]) return alert("Choose an image first.");
    const fd = new FormData();
    fd.append("image", imageFile.files[0]);
    const r = await fetch("/api/upload", { method: "POST", body: fd });
    if (!r.ok) return alert("Upload failed");
    const { url } = await r.json();
    imageUrlInput.value = url;
    renderPreview(url);
  };
}

/* ---------------- Toast ---------------- */

function toast(msg) {
  const t = document.createElement("div");
  t.textContent = msg;
  t.style.position = "fixed";
  t.style.bottom = "14px";
  t.style.right = "14px";
  t.style.background = "#191a1c";
  t.style.border = "1px solid #2a2b2f";
  t.style.padding = "8px 10px";
  t.style.borderRadius = "10px";
  t.style.opacity = "0.95";
  t.style.zIndex = "9999";
  document.body.appendChild(t);
  setTimeout(() => t.remove(), 1800);
}

/* ---------------- List views ---------------- */

function rowView(p) {
  const imgSrc = p.imageUrl && p.imageUrl.trim() ? p.imageUrl : PLACEHOLDER;
  const badge = computeBadge(p);

  // SALE ribbon if discounted
  let saleRibbon = "";
  if (p.oldPrice && p.oldPrice > p.price) {
    const percent = Math.round(100 - (p.price / p.oldPrice) * 100);
    saleRibbon = `<span style="
        background:#e6004c;
        color:#fff;
        font-size:11px;
        font-weight:700;
        padding:2px 6px;
        margin-left:6px;
        border-radius:4px;
      ">SALE -${percent}%</span>`;
  }

  const hiddenTag = p.hidden
    ? `<span style="margin-left:8px;padding:2px 8px;border-radius:999px;font-size:11px;font-weight:700;background:#553845;color:#fff">HIDDEN</span>`
    : "";
  const hideLabel = p.hidden ? "Unhide" : "Hide";

  // Price display
  let priceHTML = euro(p.price);
  if (p.oldPrice && p.oldPrice > p.price) {
    priceHTML = `
      <span style="text-decoration:line-through; opacity:0.6; margin-right:6px;">
        ${euro(p.oldPrice)}
      </span>
      <span style="color:#e6004c; font-weight:700;">
        ${euro(p.price)}
      </span>
    `;
  }

  return `
    <div class="row" data-id="${p.id}" data-hidden="${p.hidden ? "1" : "0"}">
      <div style="display:flex; gap:8px; align-items:center">
        <img src="${imgSrc}" alt="${p.name}" width="40" height="40"
             style="border-radius:6px;object-fit:cover"
             onerror="this.onerror=null;this.src='${PLACEHOLDER}'">
        <div>
          <div>
            ${p.id}. ${p.name} ${badgeHTML(badge)} ${hiddenTag} ${saleRibbon}
          </div>
          <div class="price" style="font-size:12px">
            <strong>${p.category || "—"}</strong> — ${priceHTML} — stock ${typeof p.stock === "number" ? p.stock : "—"}
          </div>
        </div>
      </div>
      <div>
        <button class="btn" data-edit="${p.id}">Edit</button>
        <button class="btn" data-action="stock">Stock − / +</button>
        <button class="btn" data-action="hide">${hideLabel}</button>
        <button class="btn btn-accent" data-del="${p.id}">Delete</button>
      </div>
    </div>`;
}

function rowEditor(p) {
  // derive regular & sale from stored data
  const onSale = p.oldPrice && p.oldPrice > p.price;
  const regularC = onSale ? p.oldPrice : p.price;
  const saleC = onSale ? p.price : null;

  const CAT = [
    { value: "", label: "— No category —" },
    { value: "clothes", label: "Clothes" },
    { value: "shoes", label: "Shoes" },
    { value: "accessories", label: "Accessories" },
    { value: "electronics", label: "Electronics" },
    { value: "perfume", label: "Perfume" },
    { value: "cosmetics", label: "Cosmetics" },
  ];
  const catOpts = CAT.map(
    (c) =>
      `<option value="${c.value}" ${(p.category ?? "") === c.value ? "selected" : ""}>${c.label}</option>`
  ).join("");

  const imgSrc = p.imageUrl && p.imageUrl.trim() ? p.imageUrl : PLACEHOLDER;
  const badge = computeBadge(p);

  // Discount percent (helper)
  let discountHelper = "";
  if (saleC !== null && regularC > saleC) {
    const percent = Math.round(100 - (saleC / regularC) * 100);
    discountHelper = `<span style="font-size:12px; color:#e6004c; font-weight:600; margin-left:6px">(−${percent}%)</span>`;
  }

  return `
    <div class="row edit" data-id="${p.id}">
      <div style="display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:8px">
        <input name="name" value="${p.name}" placeholder="Name" />
        <input name="slug" value="${p.slug}" placeholder="Slug" />

        <!-- Regular/original price -->
        <input name="priceEuro" type="number" step="0.01"
               value="${(regularC / 100).toFixed(2)}" placeholder="Regular Price (€)" />

        <!-- Sale/discounted price -->
        <div style="display:flex; align-items:center; gap:6px;">
          <input name="oldPriceEuro" type="number" step="0.01"
                 value="${saleC !== null ? (saleC / 100).toFixed(2) : ""}"
                 placeholder="Sale Price (€)" />
          ${discountHelper}
        </div>

        <select name="category">${catOpts}</select>
        <input name="imageUrl" value="${p.imageUrl || ""}" placeholder="Image URL" />
        <input name="stock" type="number" value="${p.stock || 0}" placeholder="Stock" />
      </div>

      <div style="display:flex;align-items:center;gap:10px;margin-top:8px">
        <img src="${imgSrc}" alt="${p.name}"
             style="max-width:100px;border-radius:6px;object-fit:cover"
             onerror="this.onerror=null;this.src='${PLACEHOLDER}'">
        ${badgeHTML(badge)}
      </div>

      <div style="display:flex;gap:8px;flex-wrap:wrap">
        <button class="btn btn-accent" data-save="${p.id}">Save</button>
        <button class="btn" data-cancel="${p.id}">Cancel</button>
      </div>
    </div>`;
}

/* ---------------- Data + filters ---------------- */

let cache = [];

function applyAdminFilters(items) {
  let out = items.slice();
  const q = (adminSearch?.value || "").trim().toLowerCase();
  if (q) out = out.filter((p) => (p.name || "").toLowerCase().includes(q));

  const sort = adminSort?.value || "new";
  if (sort === "price-asc") out.sort((a, b) => a.price - b.price);
  else if (sort === "price-desc") out.sort((a, b) => b.price - a.price);
  else if (sort === "name-asc") out.sort((a, b) => String(a.name).localeCompare(String(b.name)));
  else out.sort((a, b) => (b.createdAt || 0) - (a.createdAt || 0));
  return out;
}

async function refresh() {
  const res = await fetch("/api/products");
  const { items } = await res.json();
  cache = items || [];
  renderList();
}

function renderList() {
  const items = applyAdminFilters(cache);
  list.innerHTML = items.map(rowView).join("");

  // Delete
  list.querySelectorAll("[data-del]").forEach((btn) => {
    btn.onclick = async () => {
      if (!confirm("Delete this product?")) return;
      const r = await fetch("/api/products/" + btn.dataset.del, { method: "DELETE" });
      if (!r.ok) return alert("Delete failed");
      toast("Deleted");
      refresh();
    };
  });

  // Edit
  list.querySelectorAll("[data-edit]").forEach((btn) => {
    btn.onclick = () => openEditor(btn.dataset.edit);
  });

  // Stock adjust
  list.querySelectorAll("[data-action='stock']").forEach((btn) => {
    btn.onclick = async () => {
      const row = btn.closest(".row");
      const id = row.dataset.id;
      const deltaStr = prompt("Adjust stock by (e.g. +1 or -1):", "1");
      if (deltaStr === null) return;
      const delta = Number(deltaStr);
      if (!Number.isFinite(delta) || delta === 0) return alert("Enter a non-zero number.");

      const r = await fetch(`/api/products/${id}/stock`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ delta })
      });
      if (!r.ok) {
        const e = await r.json().catch(() => ({}));
        return alert(e.error || "Stock update failed");
      }
      toast("Stock updated");
      refresh();
    };
  });

  // Hide / Unhide
  list.querySelectorAll("[data-action='hide']").forEach((btn) => {
    btn.onclick = async () => {
      const row = btn.closest(".row");
      const id = row.dataset.id;
      const isHidden = row.dataset.hidden === "1";
      const nextHidden = !isHidden;

      const r = await fetch(`/api/products/${id}/visibility`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ hidden: nextHidden })
      });
      if (!r.ok) {
        const e = await r.json().catch(() => ({}));
        return alert(e.error || "Visibility toggle failed");
      }
      toast(nextHidden ? "Hidden" : "Unhidden");
      refresh();
    };
  });
}

function openEditor(id) {
  const p = cache.find((x) => String(x.id) === String(id));
  const row = list.querySelector(`.row[data-id="${id}"]`);
  row.outerHTML = rowEditor(p);

  const editor = list.querySelector(`.row.edit[data-id="${id}"]`);

  editor.querySelector("[data-cancel]").onclick = () => {
    editor.outerHTML = rowView(p);
    renderList(); // re-bind handlers
  };

  editor.querySelector("[data-save]").onclick = async () => {
    // Regular & Sale in edit form
    const regularC = toCents(editor.querySelector('[name="priceEuro"]').value);      // regular €
    const saleStr  = editor.querySelector('[name="oldPriceEuro"]').value.trim();     // sale €

    let priceC, oldC;
    if (saleStr) {
      const saleC = toCents(saleStr);
      if (saleC >= regularC) {
        alert("Sale price must be lower than the regular price.");
        return;
      }
      priceC = saleC;     // charge discounted
      oldC   = regularC;  // compare-at is regular
    } else {
      priceC = regularC;  // no sale
      oldC   = null;
    }

    const rawCategory = editor.querySelector('[name="category"]').value;

    const payload = {
      name: editor.querySelector('[name="name"]').value,
      slug: editor.querySelector('[name="slug"]').value,
      price: priceC,
      oldPrice: oldC,
      category: rawCategory === "" ? null : rawCategory,
      imageUrl: editor.querySelector('[name="imageUrl"]').value.trim(),
      stock: Number(editor.querySelector('[name="stock"]').value || 0),
    };

    const r = await fetch(`/api/products/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    if (!r.ok) {
      const e = await r.json().catch(() => ({}));
      return alert(e.error || "Update failed");
    }
    toast("Saved");
    refresh();
  };
}

/* ---------------- Create ---------------- */

createForm.addEventListener("submit", async (e) => {
  e.preventDefault();
  const rawCategory = newCategory?.value ?? "";

  const regularC = toCents(newPrice.value);         // regular/original €
  const saleStr  = (newOldPrice?.value || "").trim(); // sale €/discounted

  let priceC, oldC;
  if (saleStr) {
    const saleC = toCents(saleStr);
    if (saleC >= regularC) {
      alert("Sale price must be lower than the regular price.");
      return;
    }
    priceC = saleC;      // charge discounted
    oldC   = regularC;   // compare-at is regular
  } else {
    priceC = regularC;   // no sale
    oldC   = null;
  }

  const payload = {
    name: newName.value,
    slug: newSlug.value,
    price: priceC,
    oldPrice: oldC,
    category: rawCategory === "" ? null : rawCategory,
    imageUrl: imageUrlInput.value && imageUrlInput.value.trim() ? imageUrlInput.value.trim() : PLACEHOLDER,
    stock: Number(newStock.value || 0),
  };

  const r = await fetch("/api/products", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });

  if (r.ok) {
    createForm.reset();
    slugDirty = false;
    renderPreview(""); // reset preview to placeholder
    toast("Created");
    refresh();
  } else {
    const err = await r.json().catch(() => ({}));
    alert(err.error || "Create failed");
  }
});

/* ---------------- Events ---------------- */

adminSearch?.addEventListener("input", renderList);
adminSort?.addEventListener("change", renderList);

/* ---------------- Init ---------------- */

refresh();
